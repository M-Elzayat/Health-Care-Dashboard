# -*- coding: utf-8 -*-
"""Healthcare Dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iVaB-1DbqkVXAMQD19v2Bss0V3QJwar_
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Patients data
df_patients = pd.read_csv("patients.csv")
print("=== Patients Data ===")
display(df_patients.head())

# Providers data
df_providers = pd.read_csv("providers.csv")
print("=== Providers Data ===")
display(df_providers.head())

# Visits data
df_visits = pd.read_csv("visits.csv")
print("=== Visits Data ===")
display(df_visits.head())

# Cities data
df_cities = pd.read_csv("cities.csv")
print("=== Cities Data ===")
display(df_cities.head())

# Departments data
df_departments = pd.read_csv("departments.csv")
print("=== Departments Data ===")
display(df_departments.head())

# Diagnoses data
df_diagnoses = pd.read_csv("diagnoses.csv")
print("=== Diagnoses Data ===")
display(df_diagnoses.head())

# Procedures data
df_procedures = pd.read_csv("procedures.csv")
print("=== Procedures Data ===")
display(df_procedures.head())

# Insurance data
df_insurance = pd.read_csv("insurance.csv")
print("=== Insurance Data ===")
display(df_insurance.head())

# Patients
print("=== Patients Data Types ===")
print(df_patients.dtypes)
print("\n")

# Providers
print("=== Providers Data Types ===")
print(df_providers.dtypes)
print("\n")

# Visits
print("=== Visits Data Types ===")
print(df_visits.dtypes)
print("\n")

# Cities
print("=== Cities Data Types ===")
print(df_cities.dtypes)
print("\n")

# Departments
print("=== Departments Data Types ===")
print(df_departments.dtypes)
print("\n")

# Diagnoses
print("=== Diagnoses Data Types ===")
print(df_diagnoses.dtypes)
print("\n")

# Procedures
print("=== Procedures Data Types ===")
print(df_procedures.dtypes)
print("\n")

# Insurance
print("=== Insurance Data Types ===")
print(df_insurance.dtypes)
print("\n")

print(df_diagnoses.columns)

# Dictionary of datasets for easy reference
datasets = {
    "Patients": df_patients,
    "Providers": df_providers,
    "Cities": df_cities,
    "Departments": df_departments,
    "Insurance": df_insurance
}

# Start with Fact table (Visits)
df_fact = df_visits.copy()

# Merge dimensions one by one
df_fact = pd.merge(df_fact, df_patients, on="Patient ID", how="left")
df_fact = pd.merge(df_fact, df_providers, on="Provider ID", how="left")
df_fact = pd.merge(df_fact, df_cities, on="City ID", how="left")
df_fact = pd.merge(df_fact, df_departments, on="Department ID", how="left")
df_fact = pd.merge(df_fact, df_insurance, on="Insurance ID", how="left")

print("=== Fact Table Shape ===")
print(df_fact.shape)
display(df_fact.head())

# Diagnoses and Procedures are independent dimensions (no Visit ID in them)
print("=== Diagnoses Columns ===")
print(df_diagnoses.columns)

print("=== Procedures Columns ===")
print(df_procedures.columns)

# Start with Visits as Fact table
df_fact = df_visits.copy()

# Join with Patients
df_fact = pd.merge(df_fact, df_patients, on="Patient ID", how="left")

# Join with Providers
df_fact = pd.merge(df_fact, df_providers, on="Provider ID", how="left")

# Join with Cities
df_fact = pd.merge(df_fact, df_cities, on="City ID", how="left")

# Join with Departments
df_fact = pd.merge(df_fact, df_departments, on="Department ID", how="left")

# Join with Insurance
df_fact = pd.merge(df_fact, df_insurance, on="Insurance ID", how="left")

# Join with Diagnoses
df_fact = pd.merge(df_fact, df_diagnoses, on="Diagnosis ID", how="left")

# Join with Procedures
df_fact = pd.merge(df_fact, df_procedures, on="Procedure ID", how="left")

print("=== Final Fact Table ===")
print(df_fact.head())

# Basic Exploration for Cleaning Needs
print("=== Shape of Fact Table ===")
print(df_fact.shape)

print("\n=== Missing Values ===")
print(df_fact.isnull().sum())

print("\n=== Duplicated Rows ===")
print(df_fact.duplicated().sum())

print("\n=== Data Types ===")
print(df_fact.dtypes)

print("\n=== Summary Statistics (Numerical Columns) ===")
print(df_fact.describe())

print("\n=== Unique Values in Categorical Columns ===")
for col in df_fact.select_dtypes(include='object').columns:
    print(f"{col}: {df_fact[col].nunique()} unique values")

#  Rename age and gender columns

df_fact = df_fact.rename(columns={
    "Age_x": "Patient Age",
    "Gender_x": "Patient Gender",
    "Age_y": "Provider Age",
    "Gender_y": "Provider Gender"
})

print(df_fact[["Patient Age", "Patient Gender", "Provider Age", "Provider Gender"]].head())

# Patients Cleaning
df_patients_clean = df_patients.copy()

# Rename columns for clarity (optional)
df_patients_clean = df_patients_clean.rename(columns={
    "Age": "Patient Age",
    "Gender": "Patient Gender"
})

# Drop duplicates
df_patients_clean = df_patients_clean.drop_duplicates()

# Handle missing values
df_patients_clean["Patient Age"] = df_patients_clean["Patient Age"].fillna(df_patients_clean["Patient Age"].median())

print("=== Patients Cleaned ===")
print(df_patients_clean.info())

# Providers Cleaning
df_providers_clean = df_providers.copy()

# Rename columns
df_providers_clean = df_providers_clean.rename(columns={
    "Age": "Provider Age",
    "Gender": "Provider Gender"
})

# Drop duplicates
df_providers_clean = df_providers_clean.drop_duplicates()

print("=== Providers Cleaned ===")
print(df_providers_clean.info())

# Visits Cleaning
df_visits_clean = df_visits.copy()

# Convert date columns
date_cols = ["Date of Visit", "Follow-Up Visit Date", "Discharge Date", "Admitted Date"]
for col in date_cols:
    df_visits_clean[col] = pd.to_datetime(df_visits_clean[col], errors="coerce")

# Fill missing Insurance Coverage
df_visits_clean["Insurance Coverage"] = df_visits_clean["Insurance Coverage"].fillna(df_visits_clean["Insurance Coverage"].median())

# Keep negative costs out
num_cols = ["Treatment Cost", "Medication Cost", "Room Charges(daily rate)", "Insurance Coverage"]
for col in num_cols:
    df_visits_clean = df_visits_clean[df_visits_clean[col] >= 0]

print("=== Visits Cleaned ===")
print(df_visits_clean.info())

# Cities Cleaning
df_cities_clean = df_cities.copy()

# Drop duplicates
df_cities_clean = df_cities_clean.drop_duplicates()

print("=== Cities Cleaned ===")
print(df_cities_clean.info())

# Departments Cleaning
df_departments_clean = df_departments.copy()

# Drop duplicates
df_departments_clean = df_departments_clean.drop_duplicates()

print("=== Departments Cleaned ===")
print(df_departments_clean.info())

# Insurance Cleaning
df_insurance_clean = df_insurance.copy()

# Drop duplicates
df_insurance_clean = df_insurance_clean.drop_duplicates()

print("=== Insurance Cleaned ===")
print(df_insurance_clean.info())

# Diagnoses Cleaning
df_diagnoses_clean = df_diagnoses.copy()

# Drop duplicates
df_diagnoses_clean = df_diagnoses_clean.drop_duplicates()

print("=== Diagnoses Cleaned ===")
print(df_diagnoses_clean.info())

# Procedures Cleaning
df_procedures_clean = df_procedures.copy()

# Drop duplicates
df_procedures_clean = df_procedures_clean.drop_duplicates()

print("=== Procedures Cleaned ===")
print(df_procedures_clean.info())

# keep original data
df_visits_original = df_visits.copy()

# cleaning steps
df_visits_clean = df_visits_original.copy()

# reload the original csv file to get back all values (including negatives)
df_visits_clean = pd.read_csv("/content/visits.csv")

# 1:Departments generate the highest treatment revenue
df_fact.groupby("Department")["Treatment Cost"].sum().sort_values(ascending=False)

# 2:Average patient satisfaction score per doctor
df_fact.groupby("Provider Name")["Patient Satisfaction Score"].mean().sort_values(ascending=False)

# 3:Insurance providers covering the most expensive procedures
df_fact.groupby("Insurance Provider")["Procedure ID"].count().sort_values(ascending=False)

# 4:Readmission rate (patients returning for follow-up visits)
readmission_rate = df_fact["Follow-Up Visit Date"].notna().mean()
print("Readmission Rate:", readmission_rate)

# 5: Most common diagnoses in emergency visits
df_fact[df_fact["Emergency Visit"] == "Yes"]["Diagnosis"].value_counts()

# 6: Distribution of treatment costs by city
df_fact.groupby("City")["Treatment Cost"].sum().sort_values(ascending=False)

# 7: Effect of patient age on satisfaction scores
df_fact.groupby("Patient Age")["Patient Satisfaction Score"].mean()

# 8: Doctors handling the highest number of patients
df_fact.groupby("Provider Name")["Patient ID"].count().sort_values(ascending=False)

# 9: Percentage of visits resulting in hospital admission
hospital_admission_rate = df_fact["Admitted Date"].notna().mean()
print("Hospital Admission Rate:", hospital_admission_rate)

# 10: What is the average treatment cost for each service type
df_fact.groupby("Service Type")["Treatment Cost"].mean().sort_values(ascending=False)

# 1 Departments revenue
dept_revenue = df_fact.groupby("Department")["Treatment Cost"].sum().sort_values(ascending=False)
plt.figure(figsize=(8,5))
sns.barplot(x=dept_revenue.index, y=dept_revenue.values, palette="Blues_d")
plt.title("Total Treatment Revenue by Department")
plt.ylabel("Revenue")
plt.xlabel("Department")
plt.show()

# 2 Distribution of Patient Ages
plt.figure(figsize=(8,5))
sns.histplot(df_fact["Patient Age"], bins=20, kde=True, color="skyblue")
plt.title("Distribution of Patient Ages")
plt.xlabel("Age")
plt.ylabel("Count")
plt.show()

# 3 Monthly Visits Trend
df_fact["Visit Month"] = pd.to_datetime(df_fact["Date of Visit"]).dt.to_period("M")
monthly_visits = df_fact.groupby("Visit Month")["Patient ID"].count()
plt.figure(figsize=(10,5))
monthly_visits.plot(kind="line", marker="o", color="green")
plt.title("Monthly Visits Trend")
plt.xlabel("Month")
plt.ylabel("Number of Visits")
plt.grid(True)
plt.show()

# 4 Top 10 Diagnoses
top_diag = df_fact["Diagnosis"].value_counts().head(10)
plt.figure(figsize=(10,5))
sns.barplot(x=top_diag.index, y=top_diag.values, palette="Reds_d")
plt.title("Top 10 Diagnoses")
plt.xticks(rotation=45)
plt.ylabel("Count")
plt.show()

# 5 Average Room Charges by City
room_charges_city = df_fact.groupby("City")["Room Charges(daily rate)"].mean().sort_values(ascending=False)
plt.figure(figsize=(10,5))
sns.barplot(x=room_charges_city.index, y=room_charges_city.values, palette="coolwarm")
plt.title("Average Room Charges by City")
plt.xticks(rotation=45)
plt.ylabel("Avg Room Charge")
plt.show()

# 6 Readmission Rate by Age Group
df_fact["Age Group"] = pd.cut(df_fact["Patient Age"], bins=[0,18,30,45,60,80], labels=["<18","18-30","31-45","46-60","61-80"])
readmit_age = df_fact.groupby("Age Group")["Follow-Up Visit Date"].apply(lambda x: x.notna().mean())
plt.figure(figsize=(8,5))
sns.barplot(x=readmit_age.index, y=readmit_age.values, palette="Set2")
plt.title("Readmission Rate by Age Group")
plt.ylabel("Rate")
plt.show()

# 7 Patient Satisfaction Over Time
satisfaction_trend = df_fact.groupby("Visit Month")["Patient Satisfaction Score"].mean()
plt.figure(figsize=(10,5))
satisfaction_trend.plot(kind="line", marker="o", color="purple")
plt.title("Patient Satisfaction Over Time")
plt.xlabel("Month")
plt.ylabel("Avg Satisfaction Score")
plt.grid(True)
plt.show()

# 8 Top 10 Diagnoses
top_diag = df_fact["Diagnosis"].value_counts().head(10)

plt.figure(figsize=(8,8))
plt.pie(
    top_diag.values,
    labels=top_diag.index,
    autopct="%1.1f%%",
    startangle=140,
    colors=plt.cm.viridis.colors
)

plt.title("Top 10 Diagnoses Distribution", fontsize=14)
plt.show()